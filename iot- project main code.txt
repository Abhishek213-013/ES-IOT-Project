#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP32Servo.h>
#include <veg_detect_inferencing.h>
#include "edge-impulse-sdk/dsp/image/image.hpp"
#include "esp_camera.h"

// OLED Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Pin Definitions
#define FLASH_LED_PIN 4
#define SERVO_PIN 13      // Servo control pin
#define I2C_SDA_PIN 15    // OLED SDA
#define I2C_SCL_PIN 14    // OLED SCL

// Servo Parameters (updated)
#define SERVO_GARLIC_POS 180      // Position for garlic
#define SERVO_OTHER_POS 90        // Position for other vegetables
#define SERVO_DEFAULT_POS 0       // Default position (no object)
#define SERVO_MOVE_DELAY 50       // Reduced delay for faster movement
#define SERVO_RETURN_DELAY 1000   // Delay before returning to default

Servo vegServo;  // Servo object

// Camera Configuration (AI Thinker ESP32-CAM)
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27
#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

// Edge Impulse Settings
#define EI_CAMERA_RAW_FRAME_BUFFER_COLS 320
#define EI_CAMERA_RAW_FRAME_BUFFER_ROWS 240
#define EI_CAMERA_FRAME_BYTE_SIZE 3

static bool debug_nn = false;
static bool is_initialised = false;
uint8_t *snapshot_buf;

static camera_config_t camera_config = {
    .pin_pwdn = PWDN_GPIO_NUM,
    .pin_reset = RESET_GPIO_NUM,
    .pin_xclk = XCLK_GPIO_NUM,
    .pin_sscb_sda = SIOD_GPIO_NUM,
    .pin_sscb_scl = SIOC_GPIO_NUM,
    .pin_d7 = Y9_GPIO_NUM,
    .pin_d6 = Y8_GPIO_NUM,
    .pin_d5 = Y7_GPIO_NUM,
    .pin_d4 = Y6_GPIO_NUM,
    .pin_d3 = Y5_GPIO_NUM,
    .pin_d2 = Y4_GPIO_NUM,
    .pin_d1 = Y3_GPIO_NUM,
    .pin_d0 = Y2_GPIO_NUM,
    .pin_vsync = VSYNC_GPIO_NUM,
    .pin_href = HREF_GPIO_NUM,
    .pin_pclk = PCLK_GPIO_NUM,
    .xclk_freq_hz = 20000000,
    .ledc_timer = LEDC_TIMER_0,
    .ledc_channel = LEDC_CHANNEL_0,
    .pixel_format = PIXFORMAT_JPEG,
    .frame_size = FRAMESIZE_QVGA,
    .jpeg_quality = 12,
    .fb_count = 1,
    .fb_location = CAMERA_FB_IN_PSRAM,
    .grab_mode = CAMERA_GRAB_WHEN_EMPTY,
};

static int ei_camera_get_data(size_t offset, size_t length, float *out_ptr) 
{
    size_t pixel_ix = offset * 3;
    size_t pixels_left = length;
    size_t out_ptr_ix = 0;

    while (pixels_left != 0) {
        out_ptr[out_ptr_ix] = (snapshot_buf[pixel_ix + 2] << 16) + (snapshot_buf[pixel_ix + 1] << 8) + snapshot_buf[pixel_ix];
        out_ptr_ix++;
        pixel_ix += 3;
        pixels_left--;
    }
    return 0;
}

void setup() {
    Serial.begin(115200);
    while(!Serial);

    // Initialize I2C and OLED
    Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
    if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("OLED failed"));
        for(;;);
    }

    // Initialize Servo
    if(!vegServo.attach(SERVO_PIN)) {
        Serial.println("Servo attach failed!");
    }
    vegServo.write(SERVO_DEFAULT_POS); // Start at default position
    delay(SERVO_MOVE_DELAY);

    // Welcome Message
    displayWelcome();

    // Initialize Camera
    pinMode(FLASH_LED_PIN, OUTPUT);
    digitalWrite(FLASH_LED_PIN, HIGH);
    if(!ei_camera_init()) {
        display.println("Camera FAIL");
        display.display();
        while(1);
    }
    digitalWrite(FLASH_LED_PIN, LOW);
}

void loop() {
    if(ei_sleep(5) != EI_IMPULSE_OK) return;

    // Allocate snapshot buffer
    snapshot_buf = (uint8_t*)malloc(EI_CAMERA_RAW_FRAME_BUFFER_COLS * EI_CAMERA_RAW_FRAME_BUFFER_ROWS * EI_CAMERA_FRAME_BYTE_SIZE);
    if(!snapshot_buf) {
        ei_printf("Failed to allocate buffer\n");
        return;
    }

    // Eye Blink Animation
    blinkEyes();

    // Capture Image
    digitalWrite(FLASH_LED_PIN, HIGH);
    if(!ei_camera_capture(EI_CLASSIFIER_INPUT_WIDTH, EI_CLASSIFIER_INPUT_HEIGHT, snapshot_buf)) {
        ei_printf("Capture failed\n");
        free(snapshot_buf);
        return;
    }

    // Initialize Edge Impulse signal structure
    ei::signal_t ei_signal;
    ei_signal.total_length = EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT;
    ei_signal.get_data = &ei_camera_get_data;

    // Run Inference
    ei_impulse_result_t result = {0};
    EI_IMPULSE_ERROR err = run_classifier(&ei_signal, &result, debug_nn);
    if(err != EI_IMPULSE_OK) {
        ei_printf("Classifier error: %d\n", err);
        free(snapshot_buf);
        return;
    }

    // Process Results
    processDetectionResults(result);

    // Cleanup
    free(snapshot_buf);
    digitalWrite(FLASH_LED_PIN, LOW);
    delay(2000); // Delay between detections
}

// Helper Functions
void displayWelcome() {
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("Veg Sorter");
    display.setTextSize(1);
    display.setCursor(0, 30);
    display.println("Ready to scan...");
    display.display();
    delay(2000);
}

void blinkEyes() {
    for(int i = 0; i < 3; i++) {
        display.clearDisplay();
        display.fillCircle(40, 32, 10, SSD1306_WHITE); // Left eye
        display.fillCircle(88, 32, 10, SSD1306_WHITE); // Right eye
        display.display();
        delay(300);
        display.clearDisplay();
        display.display();
        delay(300);
    }
}

void processDetectionResults(ei_impulse_result_t result) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.println("Detection Results:");

    bool detected = false;
    bool isGarlic = false;
    String detectedItem = "None";
    float maxConfidence = 0;

    #if EI_CLASSIFIER_OBJECT_DETECTION == 1
        for(uint32_t i = 0; i < result.bounding_boxes_count; i++) {
            if(result.bounding_boxes[i].value > maxConfidence) {
                maxConfidence = result.bounding_boxes[i].value;
                detectedItem = String(result.bounding_boxes[i].label);
                isGarlic = (strstr(result.bounding_boxes[i].label, "Garlic") != NULL);
                detected = true;
            }
        }
    #else
        for(uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
            if(result.classification[i].value > maxConfidence) {
                maxConfidence = result.classification[i].value;
                detectedItem = String(ei_classifier_inferencing_categories[i]);
                isGarlic = (strstr(ei_classifier_inferencing_categories[i], "Garlic") != NULL);
                detected = true;
            }
        }
    #endif

    // Display Results
    if(detected) {
        display.setCursor(0, 15);
        display.print("Item: ");
        display.println(detectedItem);
        display.setCursor(0, 25);
        display.print("Confidence: ");
        display.print(maxConfidence * 100, 1);
        display.println("%");

        // Control Servo - Fast movement to target position
        if(isGarlic) {
            vegServo.write(SERVO_GARLIC_POS);
            display.setCursor(0, 40);
            display.println("ACTION: Garlic sorted!");
        } else {
            vegServo.write(SERVO_OTHER_POS);
            display.setCursor(0, 40);
            display.println("ACTION: Other veg sorted");
        }
        delay(SERVO_MOVE_DELAY); // Short delay for movement
        
        // Return to default position after a brief pause
        delay(SERVO_RETURN_DELAY);
        vegServo.write(SERVO_DEFAULT_POS);
        delay(SERVO_MOVE_DELAY);
    } else {
        display.setCursor(0, 15);
        display.println("No vegetables detected");
        vegServo.write(SERVO_DEFAULT_POS); // Stay at default position
        delay(SERVO_MOVE_DELAY);
    }
    display.display();
}

// Camera Functions
bool ei_camera_init(void) {
    if(is_initialised) return true;
    esp_err_t err = esp_camera_init(&camera_config);
    if(err != ESP_OK) {
        Serial.printf("Camera init failed: 0x%x\n", err);
        return false;
    }
    sensor_t *s = esp_camera_sensor_get();
    if(s->id.PID == OV3660_PID) {
        s->set_vflip(s, 1);
        s->set_brightness(s, 1);
        s->set_saturation(s, 0);
    }
    is_initialised = true;
    return true;
}

void ei_camera_deinit(void) {
    esp_err_t err = esp_camera_deinit();
    if(err != ESP_OK) {
        ei_printf("Camera deinit failed\n");
    }
    is_initialised = false;
}

bool ei_camera_capture(uint32_t img_width, uint32_t img_height, uint8_t *out_buf) {
    if(!is_initialised) {
        ei_printf("Camera not initialized\n");
        return false;
    }
    camera_fb_t *fb = esp_camera_fb_get();
    if(!fb) {
        ei_printf("Camera capture failed\n");
        return false;
    }
    bool converted = fmt2rgb888(fb->buf, fb->len, PIXFORMAT_JPEG, snapshot_buf);
    esp_camera_fb_return(fb);
    if(!converted) {
        ei_printf("RGB conversion failed\n");
        return false;
    }
    if((img_width != EI_CAMERA_RAW_FRAME_BUFFER_COLS) || (img_height != EI_CAMERA_RAW_FRAME_BUFFER_ROWS)) {
        ei::image::processing::crop_and_interpolate_rgb888(
            out_buf, EI_CAMERA_RAW_FRAME_BUFFER_COLS, EI_CAMERA_RAW_FRAME_BUFFER_ROWS,
            out_buf, img_width, img_height);
    }
    return true;
}

//updated 1
